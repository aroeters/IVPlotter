/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nonguitasks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import nodes.Datapoint;
import nodes.DatapointCollection;

/**
 *
 * @author Arne
 */
public class DataframeReader {

    /**
     * The file to parse.
     */
    private File file;
    /**
     * The mpid to a protein connection.
     */
    private final HashMap<String, ArrayList<String>> mpidToProtein;

    /**
     * Constructor of the class.
     *
     * @param fileIn the file to read.
     * @param newMap sets the mpidToProtein hashmap to the newMap
     */
    public DataframeReader(final String fileIn, final HashMap<String, ArrayList<String>> newMap) {
        this.file = new File(fileIn);
        this.mpidToProtein = newMap;
    }

    /**
     * Sets a new file as the file for the input.
     *
     * @param fileIn sets a new file to read.
     */
    public final void setNewFile(String fileIn) {
        this.file = new File(fileIn);
    }

    /**
     * Getter of the filename.
     *
     * @return returns the filename
     */
    public final File getFileName() {
        return file;
    }
    /**
     * Parses the dataframe generated by the r script
     * @return a Filled dot collection.
     * @throws FileNotFoundException
     * @throws IOException 
     */
    public final DatapointCollection readDataFrame() throws FileNotFoundException, IOException {
        DatapointCollection dotCol = new DatapointCollection();
        BufferedReader br = new BufferedReader(new FileReader(file.getPath()));
        br.readLine();
        String line;
        String[] splitLine;
        String mpid;
        Float logFC;
        Float pval;
        Float minPval = Float.MAX_VALUE; // to always be below this
        Float maxPval = Float.MIN_NORMAL; // to always be above this
        Float minLogFC = Float.MAX_VALUE; // to always be below this
        Float maxLogFC = Float.MIN_NORMAL; // to always be above this
        ArrayList<String> temp;
        while ((line = br.readLine()) != null) {
            splitLine = line.split(",");
            mpid = splitLine[0].replaceAll("\"", "");
            if (mpidToProtein.containsKey(mpid)) {
                logFC = Float.parseFloat(splitLine[1]);
                if (logFC < minLogFC) {
                    minLogFC = logFC;
                } else if (logFC > maxLogFC) {
                    maxLogFC = logFC;
                }
                pval = Float.parseFloat(splitLine[2]);
                if (pval < minPval) {
                    minPval = pval;
                } else if (pval > maxPval) {
                    maxPval = pval;
                }
                temp = (ArrayList) mpidToProtein.get(mpid);
                dotCol.addPoint(new Datapoint(mpid, Float.parseFloat(splitLine[1]), Float.parseFloat(splitLine[2]), temp.get(0), temp.subList(1, temp.size())));
            }
        }
        dotCol.setMaxLogFC(maxLogFC);
        dotCol.setMinLogFC(minLogFC);
        dotCol.setMaxPval(maxPval);
        dotCol.setMinPval(minPval);
        return dotCol;
    }
}
