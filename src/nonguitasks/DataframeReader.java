/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nonguitasks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import nodes.Datapoint;
import nodes.DatapointCollection;

/**
 *
 * @author Arne
 */
public class DataframeReader {

    /**
     * The file to parse.
     */
    private final HashMap<String, LinkedList<Double>> calculationResults;
    /**
     * The mpid to a protein connection.
     */
    private final HashMap<String, ArrayList<String>> mpidToProtein;

    /**
     * Constructor of the class.
     *
     * @param calculationResults the file to read.
     * @param newMap sets the mpidToProtein hashmap to the newMap
     */
    public DataframeReader(final HashMap<String, LinkedList<Double>> calculationResults, final HashMap<String, ArrayList<String>> newMap) {
        this.calculationResults = calculationResults;
        this.mpidToProtein = newMap;
    }

    /**
     * Parses the dataframe generated by the r script
     *
     * @return a Filled dot collection.
     * @throws FileNotFoundException
     * @throws IOException
     */
    public final DatapointCollection readDataFrame() throws FileNotFoundException, IOException {
        DatapointCollection datapoints = new DatapointCollection();
        Double logFC;
        Double pval;
        ArrayList<String> temp;
        for (String mpid : calculationResults.keySet()) {
            if (mpidToProtein.containsKey(mpid)) {
                // logFC always on the first position the the pvalue on the second
                logFC = calculationResults.get(mpid).get(0);
                pval = calculationResults.get(mpid).get(1);
                datapoints.setMaxLogFC(logFC);
                datapoints.setMinLogFC(logFC);
                datapoints.setMaxPval(pval);
                datapoints.setMinPval(pval);
                temp = (ArrayList) mpidToProtein.get(mpid);
                datapoints.addPoint(new Datapoint(mpid, logFC, pval, temp.get(0), temp.subList(1, temp.size())));
            }
        }
        return datapoints;
    }
}
